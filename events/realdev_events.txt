namespace = realdev

country_event = {
	id = realdev.0
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		if = {
			limit = {
				NOT = { has_country_flag = realdev_variables_set }
			}
			set_variable = { which = realdev_industry_shipyard_ratio value = 0.8 }
			set_variable = { which = realdev_industry_space_ratio value = 1 }
			set_variable = { which = realdev_ship_build_cap value = 100 } #Start being able to build ships at double speed with enough industrial capacity
			set_variable = { which = realdev_ship_build_speed_tech_bonus value = 10 }
			set_country_flag = realdev_variables_set
		}
		every_owned_planet = {
			if = {
				limit = {
					NOT = { has_planet_flag = realdev_variables_set }
				}
				set_variable = { which = realdev_industry_planet_ratio value = 0.8 }
				set_variable = { which = realdev_industry_construction_ratio value = 0.8 }
				set_planet_flag = realdev_variables_set
			}
			reset_realdev_variables = yes
			#Add the building on game start
			add_building = building_infrastructure_construction
			#Start of game stuff to immediately apply the modifiers
			planet_event = { id = realdev.1 }
			planet_event = { id = realdev.2 }
			planet_event = { id = realdev.3 }
		}
		
		#Country start of game stuff after planets have figured out their stuff.
		country_event = { id = realdev.4 }
		country_event = { id = realdev.5 }
		
		every_owned_planet = {
			if = {
				limit = {
					NOT = { has_planet_flag = realdev_variables_set }
				}
				set_variable = { which = realdev_industry_planet_ratio value = 0.8 }
				set_variable = { which = realdev_industry_construction_ratio value = 0.8 }
				set_planet_flag = realdev_variables_set
			}
			reset_realdev_variables = yes		
			
			planet_event = { id = realdev.1 days = 1 random = 8 }
			planet_event = { id = realdev.2 days = 10 random = 7 }
			planet_event = { id = realdev.3 days = 18 random = 7 }
		}
		
		country_event = { id = realdev.4 days = 28 }
	}
}

country_event = { #Monthly Country event
	id = realdev.100
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		country_event = { id = realdev.5 }
		if = {
			limit = {
				NOT = { has_country_flag = realdev_variables_set }
			}
			set_variable = { which = realdev_industry_shipyard_ratio value = 0.8 }
			set_variable = { which = realdev_industry_space_ratio value = 1 }
			set_variable = { which = realdev_ship_build_cap value = 100 } #Start being able to build ships at double speed with enough industrial capacity
			set_variable = { which = realdev_ship_build_speed_tech_bonus value = 10 }
			set_country_flag = realdev_variables_set
		}
		reset_realdev_variables = yes
		every_owned_planet = {
			if = {
				limit = {
					NOT = { has_planet_flag = realdev_variables_set }
				}
				set_variable = { which = realdev_industry_planet_ratio value = 0.8 }
				set_variable = { which = realdev_industry_construction_ratio value = 0.8 }
				set_planet_flag = realdev_variables_set
			}
			reset_realdev_variables = yes
			planet_event = { id = realdev.1 days = 1 random = 8 }
			planet_event = { id = realdev.2 days = 10 random = 7 }
			planet_event = { id = realdev.3 days = 18 random = 7 }
		}
		country_event = { id = realdev.4 days = 28 }
	}
}

planet_event = {
	id = realdev.1
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		#Include a bonus for capital planets
		if = {
			limit = {
				is_capital = yes
			}
			change_variable = { which = realdev_industry value = 20 }
			change_variable = { which = realdev_industry_cap value = 20 }
		}
		#Include base capacity based on Capital Buildings
		if = {
			limit = {
				has_fully_upgraded_capital = yes
			}
			change_variable = { which = realdev_industry value = 15 }
			change_variable = { which = realdev_industry_cap value = 15 }
		}
		else_if = {
			limit = {
				has_major_upgraded_capital = yes
			}
			change_variable = { which = realdev_industry value = 10 }
			change_variable = { which = realdev_industry_cap value = 10 }
		
		}
		else_if = {
			limit = {
				has_upgraded_capital = yes
			}
			change_variable = { which = realdev_industry value = 5 }
			change_variable = { which = realdev_industry_cap value = 5 }
		
		}
		else = {
			change_variable = { which = realdev_industry value = 2 }
			change_variable = { which = realdev_industry_cap value = 2 }
		}
		
		#Count Pops
		if = {
			limit = {
				has_global_flag = realdev_use_pops
			}
			set_variable = { which = realdev_pops value = trigger:num_pops }
			change_variable = { which = realdev_industry value = realdev_pops }
			change_variable = { which = realdev_industry_cap value = realdev_pops }
			change_variable = { which = realdev_industry_cap value = realdev_pops }
			if = {
				limit = {
					owner = { has_technology = tech_powered_exoskeletons }
				}
				change_variable = { which = realdev_industry value = realdev_pops }
				change_variable = { which = realdev_industry_cap value = realdev_pops }
			}
			every_owned_pop = {
				limit = {
					OR = {
						has_trait = trait_mechanical
						has_trait = trait_syncretic_proles
						has_trait = trait_nerve_stapled
						has_trait = trait_latent_psionic
						has_trait = trait_psionic
						has_trait = trait_cybernetic
						has_trait = trait_robust
						has_trait = trait_erudite
						has_trait = trait_enigmatic_intelligence
						is_enslaved = yes
					}
				}
				#Count pops that are slaves
				if = {
					limit = {
						is_enslaved = yes
					}
					PREV = { change_variable = { which = realdev_industry value = 1 } }
				}
				
				#Count pops that have obvious traits.
				switch = {
					trigger = has_trait
					trait_mechanical = {
						PREV = { change_variable = { which = realdev_industry value = 1 } }
						PREV = { change_variable = { which = realdev_industry_cap value = 2 } }
						if = {
							limit = {
								owner = { has_technology = tech_droid_workers }
							}
							PREV = { change_variable = { which = realdev_industry value = 1 } }
							PREV = { change_variable = { which = realdev_industry_cap value = 2 } }
						}
						if = {
							limit = {
								owner = { has_technology = tech_synthetic_workers }
							}
							PREV = { change_variable = { which = realdev_industry value = 1 } }
							PREV = { change_variable = { which = realdev_industry_cap value = 2 } }
						}
					}
					trait_syncretic_proles = {
						PREV = { change_variable = { which = realdev_industry value = 1 } }
					}
					trait_nerve_stapled = {
						PREV = { change_variable = { which = realdev_industry value = 1 } }
					}
					trait_psionic = {
						PREV = { change_variable = { which = realdev_industry value = 3 } }
						PREV = { change_variable = { which = realdev_industry_cap value = 6 } }
					}
					trait_latent_psionic = {
						PREV = { change_variable = { which = realdev_industry value = 1 } }
						PREV = { change_variable = { which = realdev_industry_cap value = 2 } }
					}
					trait_cybernetic = {
						PREV = { change_variable = { which = realdev_industry value = 1 } }
						PREV = { change_variable = { which = realdev_industry_cap value = 2 } }
					}
					trait_robust = {
						PREV = { change_variable = { which = realdev_industry value = 1 } }
						PREV = { change_variable = { which = realdev_industry_cap value = 2 } }
					}
					trait_erudite = {
						PREV = { change_variable = { which = realdev_industry value = 3 } }
						PREV = { change_variable = { which = realdev_industry_cap value = 6 } }
					}
					trait_enigmatic_intelligence = {
						PREV = { change_variable = { which = realdev_industry value = 2 } }
						PREV = { change_variable = { which = realdev_industry_cap value = 4 } }
					}
				}
			}
		}
		
		#Include Building Production
		export_modifier_to_variable = { modifier = district_realdev_industry_max variable = realdev_building }
		export_modifier_to_variable = { modifier = district_realdev_industry_cap_max variable = realdev_building_cap }
		
		change_variable = { which = realdev_industry value = realdev_building }
		change_variable = { which = realdev_industry_cap value = realdev_building_cap }
		
		#Count Industrial Jobs
		if = {
			limit = {
				always = no #Gonna try using resource production
			}
			export_modifier_to_variable = { modifier = job_artisan_add variable = realdev_artisan }
			export_modifier_to_variable = { modifier = job_artificer_add variable = realdev_artificer }
			export_modifier_to_variable = { modifier = job_artisan_drone_add variable = realdev_artisan_drone }
			export_modifier_to_variable = { modifier = job_foundry_add variable = realdev_foundry }
			export_modifier_to_variable = { modifier = job_alloy_drone_add variable = realdev_alloy_drone }
			export_modifier_to_variable = { modifier = job_fabricator_add variable = realdev_fabricator }
			export_modifier_to_variable = { modifier = job_catalytic_technician_add variable = realdev_catalytic }
			export_modifier_to_variable = { modifier = job_catalytic_drone_add variable = realdev_catalytic_drone }
			
			change_variable = { which = realdev_industry value = realdev_artisan }
			change_variable = { which = realdev_industry value = realdev_artificer }
			change_variable = { which = realdev_industry value = realdev_artisan_drone }
			change_variable = { which = realdev_industry value = realdev_foundry }
			change_variable = { which = realdev_industry value = realdev_alloy_drone }
			change_variable = { which = realdev_industry value = realdev_fabricator }
			change_variable = { which = realdev_industry value = realdev_catalytic }
			change_variable = { which = realdev_industry value = realdev_catalytic_drone }
		}
	}
}

#First event for planet math
planet_event = {
	id = realdev.2
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		
		#Math with resource outputs
		export_trigger_value_to_variable = {
			trigger = planet_resource_compare
			parameters = { resource = alloys type = produces }
			variable = realdev_alloy_production
		}
		export_trigger_value_to_variable = {
			trigger = planet_resource_compare
			parameters = { resource = consumer_goods type = produces }
			variable = realdev_congoods_production
		}
		divide_variable = { which = realdev_alloy_production value = 3 }
		divide_variable = { which = realdev_congoods_production value = 6 }
		ceiling_variable = realdev_alloy_production
		ceiling_variable = realdev_congoods_production
		change_variable = { which = realdev_industry value = realdev_alloy_production }
		change_variable = { which = realdev_industry value = realdev_congoods_production }
		
		#Count Administrator Jobs (And Swaps)
		export_trigger_value_to_variable = { trigger = num_assigned_jobs parameters = { job = head_researcher } variable = realdev_head_researcher }
		export_trigger_value_to_variable = { trigger = num_assigned_jobs parameters = { job = administrator } variable = realdev_administrator }
		export_trigger_value_to_variable = { trigger = num_assigned_jobs parameters = { job = noble } variable = realdev_noble }
		export_trigger_value_to_variable = { trigger = num_assigned_jobs parameters = { job = executive } variable = realdev_executive }
		export_trigger_value_to_variable = { trigger = num_assigned_jobs parameters = { job = merchant } variable = realdev_merchant }
		export_trigger_value_to_variable = { trigger = num_assigned_jobs parameters = { job = high_priest } variable = realdev_high_priest }
		
		change_variable = { which = realdev_industry_cap_rulers value = realdev_head_researcher }
		change_variable = { which = realdev_industry_cap_rulers value = realdev_administrator }
		change_variable = { which = realdev_industry_cap_rulers value = realdev_noble }
		change_variable = { which = realdev_industry_cap_rulers value = realdev_executive }
		change_variable = { which = realdev_industry_cap_rulers value = realdev_merchant }
		change_variable = { which = realdev_industry_cap_rulers value = realdev_high_priest }
		
		multiply_variable = { which = realdev_industry_cap_rulers value = 10 }
		
		change_variable = { which = realdev_industry_cap value = realdev_industry_cap_rulers }
		
		#Count Gestalt Maintenance Jobs
		export_trigger_value_to_variable = { trigger = num_assigned_jobs parameters = { job = maintenance_drone } variable = realdev_maintenance_drones }
		change_variable = { which = realdev_industry value = realdev_maintenance_drones }
		
		#Include Factory Production
		set_variable = { which = realdev_autofab_modules value = autofab_modules }
		multiply_variable = { which = realdev_autofab_modules value = 2 }
		change_variable = { which = realdev_industry value = realdev_autofab_modules }
	}
}

#Second event for planet math
planet_event = {
	id = realdev.3
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		#Include bonuses from Capital Bonus techs
		set_variable = { which = realdev_industry_multiplier_bonus value = 1 }
		if = {
			limit = {
				owner = { has_technology = tech_capital_productivity_1 }
			}
			change_variable = { which = realdev_industry_multiplier_bonus value = 0.1 }
		}
		if = {
			limit = {
				owner = { has_technology = tech_capital_productivity_2 }
			}
			change_variable = { which = realdev_industry_multiplier_bonus value = 0.2 }
		}
		if = {
			limit = {
				owner = { has_technology = tech_capital_productivity_3 }
			}
			change_variable = { which = realdev_industry_multiplier_bonus value = 0.3 }
		}
		
		#Include Amenities Bonus
		export_trigger_value_to_variable = { trigger = free_amenities variable = realdev_amenities }
		if = {
			limit = {
				check_variable = { which = realdev_amenities value > 100 }
			}
			set_variable = { which = realdev_amenities value = 100 }
		}
		if = {
			limit = {
				check_variable = { which = realdev_amenities value < -100 }
			}
			set_variable = { which = realdev_amenities value = -100 }
		}
		divide_variable = { which = realdev_amenities value = 100 }
		change_variable = { which = realdev_industry_multiplier_bonus value = realdev_amenities }
		
		
		#Pull bonuses from Governor and Ruler
		sector = {
			leader = {
				PREVPREV = { change_variable = { which = realdev_leader_level value = prevprev.realdev_leader_level } }
				PREVPREV = { change_variable = { which = realdev_industry value = prevprev.realdev_industry } }
			}
		}
		owner = {
			leader = {
				PREVPREV = { change_variable = { which = realdev_leader_level value = prevprev.realdev_leader_level } }
				PREVPREV = { change_variable = { which = realdev_industry value = prevprev.realdev_industry } }
			}
		}
		divide_variable = { which = realdev_leader_level value = 10 }
		change_variable = { which = realdev_industry_multiplier_bonus value = realdev_leader_level }
		
		#Apply Multiplier Bonuses
		multiply_variable = { which = realdev_industry value = realdev_industry_multiplier_bonus }
		multiply_variable = { which = realdev_industry_cap value = realdev_industry_multiplier_bonus }
		
		#Cap Industrial Capacity
		multiply_variable = { which = realdev_industry_cap value = 2 } #Double the cap. It's being split 4 ways.
		ceiling_variable = realdev_industry
		if = {
			limit = {
				check_variable = { which = realdev_industry value > realdev_industry_cap }
			}
			set_variable = { which = realdev_industry_capped value = realdev_industry_cap }
		}
		else = {
			set_variable = { which = realdev_industry_capped value = realdev_industry }
		}
		
		#Split industrial capacity between planet and country
		if = {
			limit = {
				NOR = {
					has_global_flag = realdev_megastructure_build_ignore
					has_global_flag = realdev_shipyard_build_ignore
				}
			}
			set_variable = { which = realdev_industry_speed value = realdev_industry_capped }
			multiply_variable = { which = realdev_industry_speed value = realdev_industry_planet_ratio }
			
			set_variable = { which = realdev_industry_country_ratio value = 1 }
			subtract_variable = { which = realdev_industry_country_ratio value = realdev_industry_planet_ratio }
			
			set_variable = { which = realdev_country_industry value = realdev_industry_capped }
			multiply_variable = { which = realdev_country_industry value = realdev_industry_country_ratio }
			
			
		
			round_variable = realdev_industry_speed
			round_variable = realdev_country_industry
		}
		
		#Split Planet industrial capacity between assembly and construction
		if = {
			limit = {
				NOT = { has_global_flag = realdev_ignore_assembly }
			}
			set_variable = { which = realdev_planet_build_speed value = realdev_industry_speed }
			multiply_variable = { which = realdev_planet_build_speed value = realdev_industry_construction_ratio }
			
			set_variable = { which = realdev_industry_assembly_ratio value = 1 }
			subtract_variable = { which = realdev_industry_assembly_ratio value = realdev_industry_construction_ratio }
			
			set_variable = { which = realdev_assembly_speed value = realdev_industry_speed }
			multiply_variable = { which = realdev_assembly_speed value = realdev_industry_assembly_ratio }
		}
		else = {
			set_variable = { which = realdev_planet_build_speed value = realdev_industry_speed }
		}
		round_variable = realdev_planet_build_speed
		round_variable = realdev_assembly_speed
	}
}

#Event for country math
country_event = {
	id = realdev.4
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		#Pull build speed dedicated to the country from all planets
		every_owned_planet = {
			PREV = { change_variable = { which = realdev_country_industry value = prev.realdev_country_industry } }
		}
		#Count Shipyards - Can't do this yet. Need exporting modifier in starbase scope.
		#every_owned_ship = {
		#	limit = {
		#		NOT = { has_global_flag = realdev_shipyard_build_ignore }
		#		OR = {
		#			is_ship_size = starbase_outpost
		#			is_ship_size = starbase_starport
		#			is_ship_size = starbase_starhold
		#			is_ship_size = starbase_starfortress
		#			is_ship_size = starbase_citadel
		#		}
		#	}
		#	export_modifier_to_variable = { modifier = starbase_shipyard_capacity_add variable = realdev_shipyard_count }
		#}
		
		#Count collected trade value for use.
		every_system_within_border = {
			limit = {
				has_system_trade_value > 0
			}
			export_trigger_value_to_variable = { trigger = has_collected_system_trade_value variable = realdev_trade_value }
			PREV = { change_variable = { which = realdev_trade_value value = prev.realdev_trade_value } }
		}
		divide_variable = { which = realdev_trade_value value = 20 }
		change_variable = { which = realdev_country_industry value = realdev_trade_value }
		
		#Megacorp Construction Company Civic
		#num_communications > 3
		
		#Megacorp Branch Offices - Need triggers for branch office production.
		#if = {
		#	limit = {
		#		is_megacorp = yes
		#	}
		#	every_country = {
		#		limit = {
		#			has_commercial_pact = prev
		#		}
		#		has_branch_office = <target/yes/no>
		#	}
		#}
		
		#Count shipyard modules, and Orbital Infrastructure Shipyards
		every_owned_starbase = {
			limit = {
				has_starbase_module = shipyard
			}
			export_trigger_value_to_variable = {
				trigger = count_starbase_modules
				parameters = { type = shipyard }
				variable = realdev_shipyard_count
			}
			if = {
				limit = {
					has_starbase_building = orbital_shipyard_link
				}
				change_variable = { which = realdev_shipyard_count value = orbitalinfra_shipyard }
			}
			PREV = { change_variable = { which = realdev_shipyard_count value = prev.realdev_shipyard_count } }
		}
		change_variable = { which = realdev_shipyard_bonus value = realdev_shipyard_count }
		multiply_variable = { which = realdev_shipyard_bonus value = 5 }		
		
		#Split country build speed between shipyards and space construction
			set_variable = { which = realdev_ship_build_speed value = realdev_country_industry }
			multiply_variable = { which = realdev_ship_build_speed value = realdev_industry_shipyard_ratio }
			
			set_variable = { which = realdev_industry_space_construction_ratio value = 1 }
			subtract_variable = { which = realdev_industry_space_construction_ratio value = realdev_industry_shipyard_ratio }
			
			set_variable = { which = realdev_space_build_speed value = realdev_country_industry }
			multiply_variable = { which = realdev_space_build_speed value = realdev_industry_space_construction_ratio }
		
		#Split space construction build speed between Minor Colonies and Megastructures
		set_variable = { which = realdev_minor_colony_speed value = realdev_space_build_speed }
		multiply_variable = { which = realdev_minor_colony_speed value = realdev_industry_space_ratio }
		divide_variable = { which = realdev_minor_colony_speed value = exploit_minor_colonies_building }
		
		set_variable = { which = realdev_industry_megastructure_ratio value = 1 }
		subtract_variable = { which = realdev_industry_megastructure_ratio value = realdev_industry_space_ratio }
		
		set_variable = { which = realdev_mega_build_speed value = realdev_space_build_speed }
		multiply_variable = { which = realdev_mega_build_speed value = realdev_industry_megastructure_ratio }
		divide_variable = { which = realdev_mega_build_speed value = realdev_upgrading_megas }
		

		
		#Split build speed between building megas and building Minor Colonies
		
		
		#Pull bonuses from Sector Governors, and Ruler
		every_owned_leader = { 
			limit = { 
				leader_class = governor
			}
			PREV = { change_variable = { which = realdev_ship_build_speed value = prev.realdev_ship_build_speed } }
		}
		leader = {
			PREV = { change_variable = { which = realdev_ship_build_speed value = prev.realdev_ship_build_speed } }
		}
		
		#Include Ship speed bonuses based on techs
		change_variable = { which = realdev_ship_build_speed value = realdev_ship_build_speed_tech_bonus }
		
		#Cap Ships build speed, transfer extra over to Megas if it is used.
		change_variable = { which = realdev_ship_build_speed value = realdev_shipyard_bonus }
		divide_variable = { which = realdev_ship_build_speed value = realdev_shipyard_count }
		if = {
			limit = {
				check_variable = { which = realdev_ship_build_speed value > realdev_ship_build_cap }
			}
			if = {
				limit = {
					NOT = { has_global_flag = realdev_ignore_assembly }
				}
				change_variable = { which = realdev_mega_build_speed value = realdev_ship_build_speed }
				subtract_variable = { which = realdev_mega_build_speed value = realdev_ship_build_cap }
			}
			change_variable = { which = realdev_ship_build_speed value = realdev_ship_build_cap }
		}
	}	
}

#Event to place the all modifiers at the start of the month. Math is done before, so as to not interfere with Start of Month stuff.
country_event = {
	id = realdev.5
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		set_variable = { which = realdev_industry_display value = 0 }
		every_owned_planet = {
			#Set display variables
			set_variable = { which = realdev_planet_build_speed_display value = realdev_planet_build_speed }
			set_variable = { which = realdev_assembly_speed_display value = realdev_assembly_speed }
			set_variable = { which = realdev_industry_cap_display value = realdev_industry_cap }
			set_variable = { which = realdev_industry_speed_display value = realdev_industry_speed }
			set_variable = { which = realdev_industry_display value = realdev_industry }
			PREV = { change_variable = { which = realdev_industry_display value = prev.realdev_industry_display } }
			
			#Include -100 to eliminate the base build speed.
			change_variable = { which = realdev_planet_build_speed value = -100 }
			change_variable = { which = realdev_assembly_speed value = -100 }
		
			#Apply planet build speed modifiers
			add_modifier = {
				modifier = realdev_planet_speed
				multiplier = realdev_planet_build_speed
				days = 30
			}
			if = {
				limit = {
					NOT = { has_global_flag = realdev_ignore_assembly }
				}
				add_modifier = {
					modifier = realdev_planet_assembly
					multiplier = realdev_assembly_speed
					days = 30
				}
			}
		}
		
		#Apply modifiers
		set_variable = { which = realdev_country_industry_display value = realdev_country_industry }
		set_variable = { which = realdev_ship_build_speed_display value = realdev_ship_build_speed }
		set_variable = { which = realdev_space_build_speed_display value = realdev_space_build_speed }
		set_variable = { which = realdev_minor_colony_speed_display value = realdev_minor_colony_speed }
		divide_variable = { which = realdev_minor_colony_speed value = 100 }
		set_variable = { which = realdev_mega_build_speed_display value = realdev_mega_build_speed }
		
		#Include -100 to eliminate the base build speed.
		change_variable = { which = realdev_ship_build_speed value = -100 }
		change_variable = { which = realdev_mega_build_speed value = -100 }
		#change_variable = { which = realdev_minor_colony_speed value = -100 }
		
		if = {
			limit = {
				NOT = { has_global_flag = realdev_shipyard_build_ignore }
			}
			add_modifier = {
				modifier = realdev_ship_speed
				multiplier = realdev_ship_build_speed
				days = 30
			}
		}
		if = {
			limit = {
				NOT = { has_global_flag = realdev_megastructure_build_ignore }
			}
			add_modifier = {
				modifier = realdev_mega_speed
				multiplier = realdev_mega_build_speed
				days = 30
			}
		}
	}
}

#Event to handle leaders leveling up, so I'm not doing it every month
country_event = {
	id = realdev.6
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		FROM = {
			#Governor
			if = {
				limit = {
					leader_class = governor
					sector = {
						exists = this
					}
				}
				export_trigger_value_to_variable = {
					trigger = has_level
					variable = realdev_leader_level
				}
				multiply_variable = { which = realdev_leader_level value = 2 }
				set_variable = { which = realdev_industry value = 0 }
				set_variable = { which = realdev_industry_cap value = 0 }
				set_variable = { which = realdev_ship_build_speed value = 0 }
				if = {
					limit = {
						has_trait = leader_trait_architectural_interest
					}
					change_variable = { which = realdev_industry value = 20 }
				}
				if = {
					limit = {
						has_trait = leader_trait_bureaucrat
					}
					change_variable = { which = realdev_industry_cap value = 20 }
				}
				if = {
					limit = {
						has_trait = leader_trait_retired_fleet_officer
					}
					change_variable = { which = realdev_ship_build_speed value = 10 }
				}
			}
			#Ruler
			else_if = {
				limit = {
					leader_class = ruler
				}
				export_trigger_value_to_variable = {
					trigger = has_level
					variable = realdev_leader_level
				}
				divide_variable = { which = realdev_leader_level value = 2 }
				ceiling_variable = realdev_leader_level
				set_variable = { which = realdev_industry value = 0 }
				set_variable = { which = realdev_ship_build_speed value = 0 }
				if = {
					limit = {
						has_ruler_trait = trait_ruler_architectural_sense
					}
					change_variable = { which = realdev_industry value = 10 }
				}
				if = {
					limit = {
						has_ruler_trait = trait_ruler_industrialist
					}
					change_variable = { which = realdev_industry value = 10 }
				}
				if = {
					limit = {
						has_ruler_trait = trait_ruler_military_pioneer
					}
					change_variable = { which = realdev_ship_build_speed value = 10 }
				}
				if = {
					limit = {
						has_ruler_trait = trait_ruler_warlike
					}
					change_variable = { which = realdev_ship_build_speed value = 10 }
				}
				if = {
					limit = {
						has_ruler_trait = leader_trait_fleet_organizer
					}
					change_variable = { which = realdev_ship_build_speed value = 10 }
				}
			}
		}
	}
}

#Event to handle leaders being newly-assigned
leader_event = {
	id = realdev.7
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		#Governor
		if = {
			limit = {
				leader_class = governor
			}
			export_trigger_value_to_variable = {
				trigger = has_level
				variable = realdev_leader_level
			}
			multiply_variable = { which = realdev_leader_level value = 2 }
			change_variable = { which = realdev_leader_level value = prevprev.realdev_leader_level }
			if = {
				limit = {
					has_trait = leader_trait_architectural_interest
				}
				change_variable = { which = realdev_industry value = 20 }
			}
			if = {
				limit = {
					has_trait = leader_trait_bureaucrat
				}
				change_variable = { which = realdev_industry_cap value = 20 }
			}
		}
	}
}

#Event to increase ship speed cap based on techs researched
country_event = {
	id = realdev.8
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		switch = {
			trigger = last_increased_tech
			tech_destroyers = {
				change_variable = { which = realdev_ship_build_cap value = 10 }
				change_variable = { which = realdev_ship_build_speed_tech_bonus value = 10 }
			}
			tech_cruisers = {
				change_variable = { which = realdev_ship_build_cap value = 10 }
				change_variable = { which = realdev_ship_build_speed_tech_bonus value = 10 }
			}
			tech_battleships = {
				change_variable = { which = realdev_ship_build_cap value = 10 }
				change_variable = { which = realdev_ship_build_speed_tech_bonus value = 10 }
			}
			tech_titans = {
				change_variable = { which = realdev_ship_build_cap value = 10 }
				change_variable = { which = realdev_ship_build_speed_tech_bonus value = 10 }
			}
			tech_juggernaut = {
				change_variable = { which = realdev_ship_build_cap value = 20 }
				change_variable = { which = realdev_ship_build_speed_tech_bonus value = 10 }
			}
			tech_interstellar_fleet_traditions = {
				change_variable = { which = realdev_ship_build_cap value = 20 }
			}
			tech_refit_standards = {
				change_variable = { which = realdev_ship_build_cap value = 20 }
			}
		}
	}
}

#Events to handle the upgrading megastructure count
country_event = {
	id = realdev.9
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		change_variable = { which = realdev_upgrading_megas value = 1 }
	}
}
country_event = {
	id = realdev.10
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		change_variable = { which = realdev_upgrading_megas value = -1 }
	}
}