namespace = kiyo_trade_orbit_event

# Trade Fleet orbiting second planet (NOT belonging to trade route owner)
fleet_event = {
	id = kiyo_trade_orbit_event.1
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_global_flag = no_trade_routes }
		any_owned_ship = { is_ship_size = kiyo_trade }
		exists = owner
		exists = orbit
		orbit = {
			exists = owner
			owner = {
				ROOT.owner = { PREV = { roci_can_trade_with_country = yes } }
			}
		}
		
		#Trade Fleet must not already have a trade route, and this must not be its origin planet.
		NOR = {
			has_fleet_flag = kiyo_event_trade_deleted_cargo
			has_fleet_flag = kiyo_trade_start@ORBIT
			has_fleet_flag = kiyo_trade_has_trade_route
		}
		#Trade Fleet must have an origin planet

		#exists = event_target:kiyo_trade_start@this
		event_target:kiyo_trade_start@this = {
			exists = this
			NOT = { is_same_value = root.orbit }
		}
		orbit = {
			root.owner = {
				NOT = {
					any_owned_fleet = {
						NOT = { is_same_value = root }
						has_fleet_flag = kiyo_trade_end@PREVPREV
					}
				}
			}
		}
	}
	
	immediate = {
		if = {
			limit = {
				has_global_flag = cargo_ships_logging
			}
			log = "Trade fleet for [Owner.GetName] arrived at [Orbit.GetName] owned by [Orbit.Owner.GetName] to create a trade route"
		}
		#Set up required flags on the fleet
		remove_fleet_flag = kiyo_trade_going@ORBIT
		set_fleet_flag = kiyo_trade_end@ORBIT
		set_fleet_flag = kiyo_trade_starting
		set_fleet_flag = kiyo_trade_has_trade_route
		
		#Start the loop event to run the trade route
		orbit = { save_global_event_target_as = kiyo_trade_end@root }
		fleet_event = { id = kiyo_trade_orbit_event.2 days = 1 }
		event_target:kiyo_trade_start@root = {
			event_target:kiyo_trade_end@root = {
				root = {
					set_variable = { which = kiyo_trade_max_cargo_ships_per_fleet value = trigger:num_ships }
					set_name = {
						key = "roci_cargo_ships_fleetname"
						variable_string = "[prevprev.GetName]"
						variable_string = "[prev.GetName]"
						variable_string = "[This.kiyo_trade_max_cargo_ships_per_fleet]"
						variable_string = "[Owner.kiyo_trade_max_cargo_ships_per_fleet]"
					}
				}
			}
		}
		
		#Prevent expire event from firing immediately after starting a trade route
		set_fleet_flag = kiyo_trade_start_expired
		set_fleet_flag = kiyo_trade_end_expired
		
		#Message for fleet owner that trade route has been started
		event_target:kiyo_trade_start@root = {
			event_target:kiyo_trade_end@root = {
				root.owner = {
					create_message = {
						type = EVENT_MESSAGE_TYPE
						localization = kiyo_trade_orbit_event.1.desc
						target = root
						days = 30
						variable = {
							type = name
							localization = PLANET_1
							scope = prevprev
						}
						variable = {
							type = name
							localization = PLANET_2
							scope = prev
						}
					}
				}
			}
		}
		
		#Event for the planet owner that a trade route has been started
		orbit.owner = { country_event = { id = kiyo_trade_orbit_event.12 } }
	}
}

# Set cargo ship origin planet to different planet
fleet_event = {
	id = kiyo_trade_orbit_event.11
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_global_flag = no_trade_routes }
		any_owned_ship = { is_ship_size = kiyo_trade }
		exists = owner
		exists = orbit
		orbit = {
			exists = owner
			owner = {
				is_country_type = default
				is_same_value = root.owner
				any_owned_planet = {
					is_same_value = prev
					num_buildings = { type = any value >= 5 }
					num_pops >= 20
				}
			}
		}
		NOT = {
			has_fleet_flag = kiyo_event_trade_deleted_cargo
			has_fleet_flag = kiyo_trade_start@ORBIT
			has_fleet_flag = kiyo_trade_has_trade_route
		}
		exists = kiyo_trade_start@root
		event_target:kiyo_trade_start@root = {
			root = {
				has_fleet_flag = kiyo_trade_start@PREV
				orbit = { NOT = { is_same_value = prevprev } }
			}
		}
	}
	
	immediate = {
		event_target:kiyo_trade_start@root = { root = { remove_fleet_flag = kiyo_trade_start@PREV } }
		set_fleet_flag = kiyo_trade_start@ORBIT
		orbit = { save_global_event_target_as = kiyo_trade_start@root }
		event_target:kiyo_trade_start@root = {
			owner = {
				root = {
					set_variable = { which = kiyo_trade_max_cargo_ships_per_fleet value = trigger:num_ships }
					set_name = {
						key = "roci_cargo_ships_fleetname"
						variable_string = "[prevprev.GetName]"
						#variable_string = "[prev.GetName]"
						variable_string = "[This.kiyo_trade_max_cargo_ships_per_fleet]"
						variable_string = "[Owner.kiyo_trade_max_cargo_ships_per_fleet]"
					}
				}
			}
		}
	}
}

# Notify Trade Target of Trade Route to their planet
country_event = {
	id = kiyo_trade_orbit_event.12
	hide_window = yes
	is_triggered_only = yes
	
	trigger = { NOT = { has_global_flag = no_trade_routes } }
	
	immediate = {
		from = {
			kiyo_mod_trade_set_route_time = yes
		}
		event_target:kiyo_trade_end@from = {
			create_message = {
				target = prev
				type = EVENT_MESSAGE_TYPE
				localization = kiyo_trade_orbit_event.12.desc
				days = 30
				variable = {
					type = name
					localization = PLANET_2
					scope = this
				}
				variable = {
					type = name
					localization = SOLAR_SYSTEM
					scope = root.from.solar_system
				}
			}
		}
	}
}

# Trade Fleet trading back and forth
fleet_event = {
	id = kiyo_trade_orbit_event.2
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_global_flag = no_trade_routes }
		exists = orbit
		has_fleet_flag = kiyo_trade_has_trade_route
		OR = {
			AND = {
				has_fleet_flag = kiyo_trade_starting
				orbit = { root = { has_fleet_flag = kiyo_trade_end@PREV } }
			}
			AND = {
				has_fleet_flag = kiyo_trade_ending
				orbit = { root = { has_fleet_flag = kiyo_trade_start@PREV } }
			}
		}
	}
	
	immediate = {
		if = {
			limit = {
				has_global_flag = cargo_ships_logging
			}
			log = "Trade fleet for [Owner.GetName] arrived at [Orbit.GetName] owned by [Orbit.Owner.GetName] to continue a trade route"
		}
		#Remove the direction flags so they can be reset
		remove_fleet_flag = kiyo_trade_starting
		remove_fleet_flag = kiyo_trade_ending
		clear_fleet_actions = this

		#Do cargo swapping with the planet
		kiyo_trade_calculate_resources = yes
		
		#Check which end of the trade route we're around
		if = {
			limit = {
				owner = {
					is_same_value = prev.orbit.owner
				}
			}
			if = {
				limit = {
					has_global_flag = cargo_ships_logging
				}
				log = "Trade fleet for [Owner.GetName] determined it was at homebase [Orbit.GetName]"
			}
			#Then set up fleet orders to go to the other end. Also rename fleet to ensure correctness, and set a flag to signify which direct it is going
			event_target:kiyo_trade_start@root = {
				event_target:kiyo_trade_end@root = {
					root = {
						set_variable = { which = kiyo_trade_max_cargo_ships_per_fleet value = trigger:num_ships }
						set_name = {
							key = "roci_cargo_ships_fleetname"
							variable_string = "[prevprev.GetName]"
							variable_string = "[prev.GetName]"
							variable_string = "[This.kiyo_trade_max_cargo_ships_per_fleet]"
							variable_string = "[Owner.kiyo_trade_max_cargo_ships_per_fleet]"
						}
					}
				}
			}
			event_target:kiyo_trade_end@this = { prev = { queue_actions = { repeat = { orbit_planet = prev wait = 5 effect = { fleet_event = { id = kiyo_trade_orbit_event.2 } } } } } }
			set_fleet_flag = kiyo_trade_starting
		}
		else_if = {
			limit = {
				owner = {
					NOT = { is_same_value = prev.orbit.owner }
				}
			}
			if = {
				limit = {
					has_global_flag = cargo_ships_logging
				}
				log = "Trade fleet for [Owner.GetName] determined it was at destination [Orbit.GetName] owned by [Orbit.Owner.GetName]"
			}
			#Then set up fleet orders to go to the other end. Also rename fleet to ensure correctness, and set a flag to signify which direction it is going
			event_target:kiyo_trade_start@root = {
				event_target:kiyo_trade_end@root = {
					root = {
						set_variable = { which = kiyo_trade_max_cargo_ships_per_fleet value = trigger:num_ships }
						set_name = {
							key = "roci_cargo_ships_fleetname_going"
							variable_string = "[prevprev.GetName]"
							variable_string = "[prev.GetName]"
							variable_string = "[This.kiyo_trade_max_cargo_ships_per_fleet]"
							variable_string = "[Owner.kiyo_trade_max_cargo_ships_per_fleet]"
						}
					}
				}
			}
			event_target:kiyo_trade_start@this = { prev = { queue_actions = { repeat = { orbit_planet = prev wait = 5 effect = { fleet_event = { id = kiyo_trade_orbit_event.2 } } } } } }
			set_fleet_flag = kiyo_trade_ending
		}
	}

}

#Event to cancel trade route when the trade fleet is stopped

#NOT = { has_fleet_order = orbit_planet_order }
#has_fleet_flag = kiyo_trade_has_trade_route