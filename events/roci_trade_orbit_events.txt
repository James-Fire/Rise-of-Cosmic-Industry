namespace = kiyo_trade_orbit_event

# Trade Fleet orbiting second planet (NOT belonging to trade route owner)
fleet_event = {
	id = kiyo_trade_orbit_event.1
	hide_window = yes
	is_triggered_only = yes
	#name = yes
	#desc = yes
	
	trigger = {
		NOT = { has_global_flag = no_trade_routes }
		any_owned_ship = { is_ship_size = kiyo_trade }
		exists = owner
		exists = orbit
		orbit = {
			exists = owner
			owner = {
				ROOT = {
					PREV = { roci_can_trade_with_country = yes }
				}
			}
		}
		
		#Trade Fleet must not already have a trade route, and this must not be its origin planet.
		NOR = {
			has_fleet_flag = kiyo_event_trade_deleted_cargo
			has_fleet_flag = kiyo_trade_start@ORBIT
			has_fleet_flag = kiyo_trade_has_trade_route
		}
		#Trade Fleet must have an origin planet
		owner = { any_owned_planet = { root = { has_fleet_flag = kiyo_trade_start@PREV } } }
		if = {
			limit = {
				owner = {
					any_owned_planet = {
						prev = {
							any_owned_fleet = {
								NOT = { is_same_value = root }
								has_fleet_flag = kiyo_trade_start@PREVPREV
							}
						}
					}
				}
			}
			orbit = {
				root.owner = {
					NOT = {
						any_owned_fleet = {
							NOT = { is_same_value = root }
							has_fleet_flag = kiyo_trade_end@PREVPREV
						}
					}
				}
			}
		}
	}
	
	immediate = {
		#Set up required flags on the fleet
		remove_fleet_flag = kiyo_trade_going@ORBIT
		set_fleet_flag = kiyo_trade_end@ORBIT
		set_fleet_flag = kiyo_trade_starting
		set_fleet_flag = kiyo_trade_has_trade_route
		
		#Start the loop event to run the trade route
		fleet_event = { id = kiyo_trade_orbit_event.2 }
		orbit = { save_event_target_as = kiyo_trade_end }
		owner = {
			random_owned_planet = { limit = { root = { has_fleet_flag = kiyo_trade_start@PREV } }
				save_event_target_as = kiyo_trade_start
				root = {
					set_name = {
						key = "roci_cargo_ships_fleetname"
						variable_string = "kiyo_trade_start.GetName"
						variable_string = "kiyo_trade_end.GetName"
						variable_string = "This.kiyo_trade_max_cargo_ships_per_fleet"
						variable_string = "Owner.kiyo_trade_max_cargo_ships_per_fleet"
					}
				}
			}
		}
		
		# Prevent expire event from firing immediately after starting a trade route
		set_fleet_flag = kiyo_trade_start_expired
		set_fleet_flag = kiyo_trade_end_expired
		
		#Message for fleet owner that trade route has been started
		owner = {
			save_event_target_as = kiyo_trade_trader	# For Notification Localization
			create_message = {
				type = EVENT_MESSAGE_TYPE
				localization = kiyo_trade_orbit_event.1.desc
				target = root
				days = 30
				variable = {
					type = name
					localization = PLANET_1
					scope = event_target:kiyo_trade_start
				}
				variable = {
					type = name
					localization = PLANET_2
					scope = event_target:kiyo_trade_end
				}
			}
		}
		
		#Event for the planet owner that a trade route has been started
		orbit = { owner = { country_event = { id = kiyo_trade_orbit_event.12 } } }
	}
}

# Set cargo ship origin planet to different planet
fleet_event = {
	id = kiyo_trade_orbit_event.11
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_global_flag = no_trade_routes }
		any_owned_ship = { is_ship_size = kiyo_trade }
		exists = owner
		exists = orbit
		orbit = {
			exists = owner
			owner = {
				is_country_type = default
				is_same_value = root.owner
				any_owned_planet = {
					is_same_value = prev
					num_buildings = { type = any value >= 5 }
					num_pops >= 20
				}
			}
		}
		NOT = {
			has_fleet_flag = kiyo_event_trade_deleted_cargo
			has_fleet_flag = kiyo_trade_start@ORBIT
			has_fleet_flag = kiyo_trade_has_trade_route
		}
		owner = {
			any_owned_planet = {
				root = {
					has_fleet_flag = kiyo_trade_start@PREV
					orbit = { NOT = { is_same_value = prevprev } }
				}
			}
		}
	}
	
	immediate = {
		owner = { random_owned_planet = { limit = { root = { has_fleet_flag = kiyo_trade_start@PREV } } root = { remove_fleet_flag = kiyo_trade_start@PREV } } }
		set_fleet_flag = kiyo_trade_start@ORBIT
		set_name = {
			key = "roci_cargo_ships_fleetname_no_target"
			variable_string = "Orbit.GetName"
			#variable_string = "kiyo_trade_end.GetName"
			variable_string = "This.kiyo_trade_max_cargo_ships_per_fleet"
			variable_string = "Owner.kiyo_trade_max_cargo_ships_per_fleet"
		}
	}
	
}

# Notify Trade Target of Trade Route to their planet
country_event = {
	id = kiyo_trade_orbit_event.12
	hide_window = yes
	is_triggered_only = yes
	
	trigger = { NOT = { has_global_flag = no_trade_routes } }
	
	immediate = {
		from = {
			random_galaxy_planet = { limit = { prev = { has_fleet_flag = kiyo_trade_start@PREV } } save_event_target_as = kiyo_trade_start }
			random_galaxy_planet = { limit = { prev = { has_fleet_flag = kiyo_trade_end@PREV } }
				save_event_target_as = kiyo_trade_end
				solar_system = { save_event_target_as = kiyo_trade_system }
			}
			kiyo_mod_trade_set_route_time = yes
		}
		create_message = {
			target = this
			type = EVENT_MESSAGE_TYPE
			localization = kiyo_trade_orbit_event.12.desc
			days = 30
			variable = {
				type = name
				localization = PLANET_2
				scope = event_target:kiyo_trade_end
			}
			variable = {
				type = name
				localization = SOLAR_SYSTEM
				scope = event_target:kiyo_trade_system
			}
		}
	}
}

# Trade Fleet trading back and forth
fleet_event = {
	id = kiyo_trade_orbit_event.2
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_global_flag = no_trade_routes }
		if = {
			limit = { exists = orbit }
			owner = { any_owned_planet = { root = { has_fleet_flag = kiyo_trade_start@PREV } } }
			any_country = { is_country_type = default any_owned_planet = { root = { has_fleet_flag = kiyo_trade_end@PREV } } }
			has_fleet_flag = kiyo_trade_has_trade_route
			OR = {
				AND = {
					has_fleet_flag = kiyo_trade_starting
					orbit = { root = { has_fleet_flag = kiyo_trade_end@PREV } }
				}
				AND = {
					has_fleet_flag = kiyo_trade_ending
					orbit = { root = { has_fleet_flag = kiyo_trade_start@PREV } }
				}
			}
		}
		else = { always = no }
	}
	
	immediate = {
		#Remove the direction flags so they can be reset
		remove_fleet_flag = kiyo_trade_starting
		remove_fleet_flag = kiyo_trade_ending
		
		#If the event targets for the two ends of the trade route don't exist, make them
		if = {
			limit = {
				NOT = { exists = event_target:kiyo_trade_start }
			}
			owner = { random_owned_planet = { limit = { root = { has_fleet_flag = kiyo_trade_start@PREV } } save_event_target_as = kiyo_trade_start } }
		}
		if = {
			limit = {
				NOT = { exists = event_target:kiyo_trade_end }
			}
			random_galaxy_planet = { limit = { root = { has_fleet_flag = kiyo_trade_end@PREV } } save_event_target_as = kiyo_trade_end }
		}
		
		#Do cargo swapping with the planet
		kiyo_trade_calculate_resources = yes
		
		#Check which end of the trade route we're around
		if = {
			limit = {
				owner = {
					is_same_value = prev.orbit.owner
				}
			}
			#Then set up fleet orders to go to the other end. Also rename fleet to ensure correctness, and set a flag to signify which direct it is going
			set_name = {
				key = "roci_cargo_ships_fleetname"
				variable_string = "kiyo_trade_start.GetName"
				variable_string = "kiyo_trade_end.GetName"
				variable_string = "This.kiyo_trade_max_cargo_ships_per_fleet"
				variable_string = "Owner.kiyo_trade_max_cargo_ships_per_fleet"
			}
			queue_actions = { orbit_planet = event_target:kiyo_trade_start wait = 5 effect = { id = "kiyo_trade_orbit_event.2.1" fleet_event = { id = kiyo_trade_orbit_event.2 } } }
			set_fleet_flag = kiyo_trade_ending
		}
		else_if = {
			limit = {
				owner = {
					NOT = { is_same_value = prev.orbit.owner }
				}
			}
			#Then set up fleet orders to go to the other end. Also rename fleet to ensure correctness, and set a flag to signify which direct it is going
			set_name = {
				key = "roci_cargo_ships_fleetname_going"
				variable_string = "kiyo_trade_start.GetName"
				variable_string = "kiyo_trade_end.GetName"
				variable_string = "This.kiyo_trade_max_cargo_ships_per_fleet"
				variable_string = "Owner.kiyo_trade_max_cargo_ships_per_fleet"
			}
			queue_actions = { orbit_planet = event_target:kiyo_trade_start wait = 5 effect = { id = "kiyo_trade_orbit_event.2.2" fleet_event = { id = kiyo_trade_orbit_event.2 } } }
			set_fleet_flag = kiyo_trade_starting
		}
	}

}

#Event to cancel trade route when the trade fleet is stopped

#NOT = { has_fleet_order = orbit_planet_order }
#has_fleet_flag = kiyo_trade_has_trade_route