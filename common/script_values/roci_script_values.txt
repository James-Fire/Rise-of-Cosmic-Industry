
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the trade_value two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_trade_value_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

roci_trade_route_value = {
	base = 0
	
	modifier = {
 		owner = { is_regular_empire = yes }	#Only applied if this trigger is true
		add = modifier:trade_value_add
 	}
	 modifier = {
		  owner = { is_regular_empire = yes }	#Only applied if this trigger is true
		 mult = modifier:trade_value_mult
	  }
	
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = unity
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = energy
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = minerals
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = food
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = alloys
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = consumer_goods
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = physics_research
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = society_research
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = engineering_research
			type = produces
		}
		mode = add
	}
	
	add = trigger:num_pops
}

roci_district_sprawl = {
	base = 0
	modifier = {
 		is_variable_set = small_colony_count
		add = small_colony_count
 	}
	modifier = {
 		is_variable_set = autofab_modules
		add = autofab_modules
 	}
}

roci_autofab_districts = {
	base = 0
	modifier = {
 		is_variable_set = autofab_energy_queue
		add = autofab_energy_queue
 	}
	modifier = {
 		is_variable_set = autofab_mineral_queue
		add = autofab_mineral_queue
 	}
	modifier = {
 		is_variable_set = autofab_food_queue
		add = autofab_food_queue
 	}
	modifier = {
 		is_variable_set = autofab_alloys_queue
		add = autofab_alloys_queue
 	}
	modifier = {
 		is_variable_set = autofab_congoods_queue
		add = autofab_congoods_queue
 	}
	modifier = {
 		is_variable_set = autofab_motes_queue
		add = autofab_motes_queue
 	}
	modifier = {
 		is_variable_set = autofab_gases_queue
		add = autofab_gases_queue
 	}
	modifier = {
 		is_variable_set = autofab_crystals_queue
		add = autofab_crystals_queue
 	}
	modifier = {
 		is_variable_set = autofab_extractor_queue
		add = autofab_extractor_queue
 	}
}

exploit_colony_energy_cost = {
	base = 50
	#is_base_planet
	modifier = {
		OR = {
			is_difficult_planet = yes
			is_vacuum_planet = yes
		}
		multiply = 2
	}
}
exploit_colony_minerals_cost = {
	base = 50
	modifier = {
		is_difficult_planet = yes
		multiply = 2
	}
}
exploit_colony_alloys_cost = {
	base = 100
	modifier = {
		is_difficult_planet = yes
		multiply = 2
	}
}
exploit_colony_srs_cost = {
	base = 0
}

###Autofab Module Stuff. This = Planet

autofab_autofab_energy_cost = {
	base = 300
}
autofab_autofab_minerals_cost = {
	base = 300
}
autofab_autofab_alloys_cost = {
	base = 150
}

autofab_module_minerals_cost = {
	base = 300
}
autofab_module_alloys_cost = {
	base = 50
}

autofab_produces_mult = {
	base = 1
	modifier = {
		owner = { has_tradition = tr_autofab_optimization }
		add = 0.05
	}
}
autofab_upkeep_mult = {
	base = 1
	modifier = {
		owner = { has_tradition = tr_autofab_optimization }
		subtract = 0.05
	}
}

autofab_power_produces_mult = {
	base = 1
	
	complex_trigger_modifier = { #Include Orbital Districts
 		trigger = num_districts
 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
 			type = district_orbital_platform_solar_array
 		}
 		mode = add 					#Allows all numerical operations
 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
 	}
	modifier = { #Include FE Building
		has_active_building = building_roci_class_4_singularity_mod
		add = 4
	}
	
	modifier = { #Include FE Building
		has_active_building = building_roci_class_4_singularity_mod
		add = 4
	}
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_power_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_minerals_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_minerals_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_food_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_food_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_alloys_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_alloys_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_motes_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_motes_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_gases_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_gases_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_crystals_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_crystals_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_extractor_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_extractor_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}
