
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the trade_value two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_trade_value_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

### General ROCI

roci_district_sprawl = {
	base = 0
	modifier = {
 		is_variable_set = small_colony_count
		add = small_colony_count
 	}
	modifier = {
 		is_variable_set = autofab_modules
		add = autofab_modules
 	}
}

###Cargo Ships

roci_trade_route_value = {
	base = 0
	
	modifier = {
 		owner = { is_regular_empire = yes }	#Only applied if this trigger is true
		add = modifier:trade_value_add
 	}
	 modifier = {
		  owner = { is_regular_empire = yes }	#Only applied if this trigger is true
		 mult = modifier:trade_value_mult
	  }
	
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = unity
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = energy
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = minerals
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = food
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = alloys
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = consumer_goods
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = physics_research
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = society_research
			type = produces
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = planet_resource_compare
		parameters = {
			resource = engineering_research
			type = produces
		}
		mode = add
	}
	
	add = trigger:num_pops
}

###Autofab

#Planet Scope
#Total calculation for how much production a module should have. Calculate per job first, then multiply by number of jobs.
roci_autofab_job_multiplier = {
	base = 0
	
	#Some sort of check to see what job was passed, so I can add the base production
	add = @roci_$job$_base_production
	modifier = {
 		owner = { is_machine_empire = yes }
		add = @roci_$job$_machine_production
 	}
	modifier = {
 		owner = { is_hive_empire = yes }
		add = @roci_$job$_hive_production
 	}
	
	#Check the total added production of the relevant job
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_$job$_produces_$resource$_add
		}
		mode = add
	}
	
	#How many jobs it replaces, pull from cached variable
	multiply = $basic_or_adv$
}
#roci_autofab_job_multiplier|basic_or_adv|roci_autofab_basic_jobs|job|technician|resource|energy|

#Planet Scope
#Total calculation for how much production a module should have. Calculate per job first, then multiply by number of jobs.
roci_autofab_job_upkeep_multiplier = {
	base = 0
	
	#Some sort of check to see what job was passed, so I can add the base upkeep
	add = @roci_$job$_base_$resource$_upkeep
	#modifier = {
 	#	owner = { is_machine_empire = yes }
	#	add = @roci_$job$_machine_$resource$_upkeep
 	#}
	#modifier = {
 	#	owner = { is_hive_empire = yes }
	#	add = @roci_$job$_hive_$resource$_upkeep
 	#}
	
	#Check the total added production of the relevant job
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_$job$_upkeep_$resource$_add
		}
		mode = add
	}
	
	#How many jobs it replaces, pull from cached variable
	multiply = $basic_or_adv$
}
#roci_autofab_job_upkeep_multiplier|basic_or_adv|roci_autofab_basic_jobs|job|technician|resource|energy|

#How many jobs does a module replace, because Hives exist
#Planet Scope, cached as a variable on the planet on terraforming and when the autofab is built
roci_autofab_basic_jobs = {
	base = 1
	modifier = {
 		uses_base_district_set = yes
		multiply = 2
 	}
	modifier = {
 		uses_habitat_district_set = yes
		multiply = 3
 	}
	modifier = {
 		uses_city_district_set = yes
		multiply = 6
 	}
	modifier = {
 		uses_ringworld_district_set = yes
		multiply = 10
 	}
	modifier = {
 		uses_infinite_space_district_set = yes
		multiply = 2
 	}
	modifier = {
 		owner = { is_hive_empire = yes }
		multiply = 1.5
 	}
}
#How many jobs does a module replace
#Planet Scope, cached as a variable on the planet on terraforming and when the autofab is built
roci_autofab_advanced_jobs = {
	base = 1
	modifier = {
 		uses_base_district_set = yes
		multiply = 2
 	}
	modifier = {
 		uses_habitat_district_set = yes
		multiply = 3
 	}
	modifier = {
 		uses_city_district_set = yes
		multiply = 6
 	}
	modifier = {
 		uses_ringworld_district_set = yes
		multiply = 10
 	}
	modifier = {
 		uses_infinite_space_district_set = yes
		multiply = 2
 	}
}

roci_autofab_districts = {
	base = 0
	modifier = {
 		is_variable_set = autofab_energy_queue
		add = autofab_energy_queue
 	}
	modifier = {
 		is_variable_set = autofab_mineral_queue
		add = autofab_mineral_queue
 	}
	modifier = {
 		is_variable_set = autofab_food_queue
		add = autofab_food_queue
 	}
	modifier = {
 		is_variable_set = autofab_alloys_queue
		add = autofab_alloys_queue
 	}
	modifier = {
 		is_variable_set = autofab_congoods_queue
		add = autofab_congoods_queue
 	}
	modifier = {
 		is_variable_set = autofab_motes_queue
		add = autofab_motes_queue
 	}
	modifier = {
 		is_variable_set = autofab_gases_queue
		add = autofab_gases_queue
 	}
	modifier = {
 		is_variable_set = autofab_crystals_queue
		add = autofab_crystals_queue
 	}
	modifier = {
 		is_variable_set = autofab_extractor_queue
		add = autofab_extractor_queue
 	}
}

autofab_module_progress = {
	base = 30
	multiply = autofab_module_build_speed
}
projected_autofab_construction_time = {
	add = autofab_module_construction_time
	multiply = autofab_module_build_speed
}
autofab_queue_time = {
	base = @factory_construction_time
	multiply = autofab_districts_queued
	add = autofab_module_construction_time
}
projected_autofab_queue_time = {
	add = value:autofab_queue_time
	multiply = autofab_module_build_speed
}

factory_generator_queue_value = {
	add = autofab_energy_queue
	add = autofab_power
}
factory_mine_queue_value = {
	add = autofab_mineral_queue
	add = autofab_mine
}
factory_farm_queue_value = {
	add = autofab_food_queue
	add = autofab_farm
}
factory_foundry_queue_value = {
	add = autofab_alloys_queue
	add = autofab_foundry
}
factory_factory_queue_value = {
	add = autofab_congoods_queue
	add = autofab_factory
}
factory_motes_queue_value = {
	add = autofab_motes_queue
	add = autofab_chemical
}
factory_gases_queue_value = {
	add = autofab_gases_queue
	add = autofab_refinery
}
factory_crystals_queue_value = {
	add = autofab_crystals_queue
	add = autofab_translucer
}
factory_extractor_queue_value = {
	add = autofab_extractor_queue
	add = autofab_extractor
}
	

###Orbital
orbital_district_count = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_city
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_industrial
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_research
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_refinery
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_shipyard
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_military
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_solar_array
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_commercial
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_mining
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_farming
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_orbital_platform_admin
		}
		mode = add
	}
}
orbital_district_upkeep = {
	base = 1
	add = modifier:planet_orbital_districts_upkeep_mult
}
orbital_spaceport_motes_mult = {
	add = orbitalinfra_farming
	add = orbitalinfra_mining
	add = orbitalinfra_industry
	add = orbitalinfra_shipyard
	add = orbitalinfra_military
}
orbital_spaceport_gas_mult = {
	add = orbitalinfra_research
	add = orbitalinfra_solar
}
orbital_spaceport_crystals_mult = {
	add = orbitalinfra_cities
	add = orbitalinfra_commercial
	add = orbitalinfra_admin
}

###Realdev

#Planet/Country Scope
realdev_ip_target = {
	base = 200
	modifier = {
		AND = {
			is_scope_type = planet
			has_building_construction = yes
		}
		add = 100
 	}
}

realdev_planet_ip_usage = {
	add = realdev_planet_build_speed
	add = realdev_assembly_speed
}

realdev_ruler_jobs = {
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = head_researcher
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = politician
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = noble
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = executive
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = merchant
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = high_priest
		}
		mode = add
	}
	multiply = 10
}

realdev_pops_industry = {
	complex_trigger_modifier = {
		trigger = count_owned_pop
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				is_enslaved = yes
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				owner = { has_technology = tech_powered_exoskeletons }
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				owner = { has_technology = tech_mega_assembly }
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				OR = {
					has_trait = trait_robot_efficient_processors
					has_trait = trait_latent_psionic
					has_trait = trait_cybernetic
					has_trait = trait_robust
					AND = {
						has_trait = trait_mechanical
						NOR = {	owner = {
							has_technology = tech_droid_workers
							has_technology = tech_synthetic_workers
						} }
					}
				}
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				OR = {
					has_trait = trait_enigmatic_intelligence
					AND = {
						has_trait = trait_mechanical
						owner = { has_technology = tech_droid_workers }
					}
				}
			}
		}
		mode = add
		mult = 2
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				OR = {
					has_trait = trait_psionic
					has_trait = trait_erudite
					AND = {
						has_trait = trait_mechanical
						owner = { has_technology = tech_synthetic_workers }
					}
				}
			}
		}
		mode = add
		mult = 3
	}
}
realdev_pops_industry_cap = {
	complex_trigger_modifier = {
		trigger = count_owned_pop
		mode = add
		mult = 2
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				owner = { has_technology = tech_powered_exoskeletons }
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				owner = { has_technology = tech_mega_assembly }
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				OR = {
					has_trait = trait_robot_efficient_processors
					has_trait = trait_latent_psionic
					has_trait = trait_cybernetic
					has_trait = trait_robust
					AND = {
						has_trait = trait_mechanical
						NOR = {	owner = {
							has_technology = tech_droid_workers
							has_technology = tech_synthetic_workers
						} }
					}
				}
			}
		}
		mode = add
		mult = 2
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				OR = {
					has_trait = trait_enigmatic_intelligence
					AND = {
						has_trait = trait_mechanical
						owner = { has_technology = tech_droid_workers }
					}
				}
			}
		}
		mode = add
		mult = 4
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				OR = {
					has_trait = trait_psionic
					has_trait = trait_erudite
					AND = {
						has_trait = trait_mechanical
						owner = { has_technology = tech_synthetic_workers }
					}
				}
			}
		}
		mode = add
		mult = 6
	}
}

realdev_autofab_modules = {
	add = autofab_modules
	multiply = 2
}

realdev_industry_multiplier = {
	#base = 1
	modifier = {
 		owner = { has_technology = tech_capital_productivity_1 }
		has_upgraded_capital = yes
		add = 0.1
 	}
	modifier = {
 		owner = { has_technology = tech_capital_productivity_2 }
		has_major_upgraded_capital = yes
		add = 0.1
 	}
	modifier = {
 		owner = { has_technology = tech_capital_productivity_3 }
		has_fully_upgraded_capital = yes
		add = 0.1
 	}
	modifier = {
 		exists = sector.leader
		add = sector.leader.realdev_leader_level
 	}
	modifier = {
 		exists = owner.leader
		add = owner.leader.realdev_leader_level
 	}
}
realdev_amenities_multiplier = {
	complex_trigger_modifier = {
		trigger = free_amenities
		mode = add
	}
	round_to = 100
	divide = 100
}


###Currently unused

exploit_colony_energy_cost = {
	base = 50
	#is_base_planet
	modifier = {
		OR = {
			is_difficult_planet = yes
			is_vacuum_planet = yes
		}
		multiply = 2
	}
}
exploit_colony_minerals_cost = {
	base = 50
	modifier = {
		is_difficult_planet = yes
		multiply = 2
	}
}
exploit_colony_alloys_cost = {
	base = 100
	modifier = {
		is_difficult_planet = yes
		multiply = 2
	}
}
exploit_colony_srs_cost = {
	base = 0
}




roci_autofab_available_districts = {
	base = 0
}
roci_autofab_available_autofab = {
	base = 0
}

autofab_autofab_energy_cost = {
	base = 300
}
autofab_autofab_minerals_cost = {
	base = 300
}
autofab_autofab_alloys_cost = {
	base = 150
}

autofab_module_minerals_cost = {
	base = 300
}
autofab_module_alloys_cost = {
	base = 50
}

autofab_produces_mult = {
	base = 1
	modifier = {
		owner = { has_tradition = tr_autofab_optimization }
		add = 0.05
	}
}
autofab_upkeep_mult = {
	base = 1
	modifier = {
		owner = { has_tradition = tr_autofab_optimization }
		subtract = 0.05
	}
}

autofab_power_produces_mult = {
	base = 1
	
	complex_trigger_modifier = { #Include Orbital Districts
 		trigger = num_districts
 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
 			type = district_orbital_platform_solar_array
 		}
 		mode = add 					#Allows all numerical operations
 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
 	}
	modifier = { #Include FE Building
		has_active_building = building_roci_class_4_singularity_mod
		add = 4
	}
	
	modifier = { #Include FE Building
		has_active_building = building_roci_class_4_singularity_mod
		add = 4
	}
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_power_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_minerals_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_minerals_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_food_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_food_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_alloys_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_alloys_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_motes_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_motes_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_gases_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_gases_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_crystals_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_crystals_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}

autofab_extractor_produces_mult = {
	base = 1
	
	multiply = value:autofab_produces_mult #General multiplier to all Autofab Output
}
autofab_extractor_upkeep_mult = {
	base = 1
	
	multiply = value:autofab_upkeep_mult #General multiplier to all Autofab Output
}
